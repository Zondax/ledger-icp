import TransportNodeHid from '@ledgerhq/hw-transport-node-hid'
import ledger_logs from '@ledgerhq/logs'
import InternetComputerApp from '@zondax/ledger-icp'

const APP_DERIVATION = "m/44'/223'/0'/0/0"

async function bls_verify(app) {
  const consent_request =
    'd9d9f7a167636f6e74656e74a763617267586b4449444c076d7b6e766c02aeaeb1cc0501d880c6d007716b028beabfc2067fa9898b8f0a7f6e036c02efcee7800402c4fbf2db05046c03d6fca70200e1edeb4a7184f7fee80a050106154449444c0001710d48656c6c6f2c20776f726c64210567726565740002656e01016b63616e69737465725f69644a0000000000600b7301016e696e67726573735f6578706972791b1859439106beb8006b6d6574686f645f6e616d6578246963726332315f63616e69737465725f63616c6c5f636f6e73656e745f6d657373616765656e6f6e63655040d0500363b9d9d37908f7606c27f33b6c726571756573745f747970656463616c6c6673656e6465724104'
  const canister_call =
    'd9d9f7a167636f6e74656e74a763617267554449444c0001710d48656c6c6f2c20776f726c64216b63616e69737465725f69644a0000000000600b7301016e696e67726573735f6578706972791b1859439106beb8006b6d6574686f645f6e616d65656772656574656e6f6e636550b27f450f2f98428befc91715d1db164f6c726571756573745f747970656463616c6c6673656e646572581d052c5f6f270fc4a3a882a8075732cba90ad4bd25d30bd2cf7b0bfe7c02'
  const certificate =
    'd9d9f7a364747265658301830182045820b70bf0da39acb0deee9893633675722d98dd612166c4da337025e940dc46cbe9830182045820c0f073840fd75ad6d01cb424845b87c4b16f7b77ab309d37729ce491ba8fabbe83024e726571756573745f7374617475738301820458201f99c28e76f3820173b763d4e4755c60a274563ad58968907d3d490bf9fc17dd8301820458203374c0ed55fbd2c79a4f8f960a0a798640dd96acc18f9909a8a2d8ae47806224830182045820a7e96b3e191efb98555f95c599e165ef455185a7611c606434a869e10fa9a88c83025820f51fa1908ed5280832be76b215c80b042998803ad6d6051f6f2ea53d3d4c9ca083018302457265706c7982035901274449444c0f6b02bc8a0101c5fed2010c6c02efcee7800402e29fdcc806046c02aeaeb1cc0503d880c6d007716e766b029ee0b53b05fcdfd79a0f716c02f99cba840806dcec99f409716d076c02007101086b04cdf1cbbe030991c38ee7040ae998e3c30a0bebd2e8d60f0b6c01b99adecb01716c03c295a993017bd8a38ca80d78d8def6f60e716c01d8a38ca80d786b04d1c4987c0da3f2efe6020e9a8597e6030ee3c581900f0e6c02fc91f4f80571c498b1b50d7d6c01fc91f4f805710100000002656e00040455736572000d48656c6c6f2c20776f726c64210a637265617465645f617402f0bc7068000000000a6163746976655f666f7203580200000000000006616d6f756e74010800c2eb0b00000000034943500e67726565742074686520757365728302467374617475738203477265706c696564830182045820d6d614eab04e8266d82874798e1c63a32ce2194ace089d406065adc220f649ff83024474696d65820349a9c38ccf90ecd0ac18697369676e61747572655830a5d5ac220693e4ca9024732fcc11363f31cf251eeff21394ab409f69c0566f43475c891a99764713600a60a979a3cffe6a64656c65676174696f6ea2697375626e65745f6964581d2c55b347ecf2686c83781d6c59d1b43e7b4cba8deb6c1b376107f2cd026b6365727469666963617465590294d9d9f7a2647472656583018204582096c96cd8ee17ea917621d34f11ad01d1da70966bee638fecf11e8342c373e4488301830182045820dd7c2c956b27efb30fa0a224e1dba1a120a8fcf6ac31ee3ec55f9083e076366b8302467375626e65748301830183018204582071387af6dac4d6350824bf1c24c8dd0af43a910b2dad8ce86390c816e63816158301830183018302581d2c55b347ecf2686c83781d6c59d1b43e7b4cba8deb6c1b376107f2cd02830183024f63616e69737465725f72616e67657382035832d9d9f782824a000000000060000001014a00000000006000ae0101824a00000000006000b001014a00000000006fffff010183024a7075626c69635f6b657982035885308182301d060d2b0601040182dc7c0503010201060c2b0601040182dc7c0503020103610090075120778eb21a530a02bcc763e7f4a192933506966af7b54c10a4d2b24de6a86b200e3440bae6267bf4c488d9a11d0472c38c1b6221198f98e4e6882ba38a5a4e3aa5afce899b7f825ed95adfa12629688073556f2747527213e8d73e40ce8204582036f3cd257d90fb38e42597f193a5e031dbd585b6292793bb04db4794803ce06e820458205b9edd6408228a3956c4b4164ed3d9ec38afabe63310f84da7b97005e1fae375820458202729572815f63e48d2248738a83546bf521d479351ff52f172de77602ff682d382045820afaa8832101bcee23eb871f6a3b372b927eb3ad5bacbbbf67aa4df296bf8c4938204582020548b9190f8403b4c671c2ef098d1f821ce6f15958a15c20df7800896dfb6a083024474696d65820349b0ed96cdfde8d0ac18697369676e6174757265583088e8d886a2be831ceab495a3b6ccd2483b14b1655305d68cde7eebe5448a2fa2857f34e8908d02c6dccb8ab934da64c9'

  const resp = await app.signBls(APP_DERIVATION, consent_request, canister_call, certificate)

  console.log(resp)
}

async function main() {
  const transport = await TransportNodeHid.default.open()
  ledger_logs.listen(log => {
    console.log(`${log.type} ${log.message}`)
  })
  const app = new InternetComputerApp.default(transport)

  console.time('bls_verify Duration')
  const resp = await bls_verify(app)
  console.timeEnd('bls_verify Duration')
  console.log(resp)
}

;(async () => {
  await main()
})()

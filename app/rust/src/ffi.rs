/*******************************************************************************
*   (c) 2024 Zondax AG
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
********************************************************************************/
mod c_api;
mod call_request;
mod consent_request;
mod resources;
mod ui;
mod verify_certificate;

#[cfg(test)]
mod ffi_verify_cert {
    use crate::error::ParserError;

    use super::{
        call_request::rs_parse_canister_call_request, consent_request::rs_parse_consent_request,
        resources::rs_clear_resources, verify_certificate::rs_verify_certificate,
    };

    const CERT: &str = "d9d9f7a264747265658301830182045820d4cff6a25570a56ac14e743e694daa2aa88b80a4bea761116471b56e4945ed6d830182045820f26d51d511039fcb5058441e6204fec42a0da824541f57d0c1c3468a13e16cbf83024e726571756573745f737461747573830182045820198df32f6757100316e899c7a3afec26f6933c06bf5d2f6233f6b0f14ac5b96f83025820ea37fdc5229d7273d500dc8ae3c009f0421049c1f02cc5ad85ea838ae7dfc04583018302457265706c7982035903304449444c0c6b02bc8a0101c5fed201096c02efcee7800402e29fdcc806046c02aeaeb1cc0503d880c6d007716e766b02d9e5b0980405fcdfd79a0f716c01c4d6b4ea0b066d076c01ffbb87a807086d716b04d1c4987c0aa3f2efe6020b9a8597e6030be3c581900f0b6c02fc91f4f80571c498b1b50d7d6c01fc91f4f805710100000002656e0007031e2320417574686f72697a6520616e6f74686572206164647265737320746f2077697468647261772066726f6d20796f7572206163636f756e74202a2a5468651f666f6c6c6f77696e67206164647265737320697320616c6c6f77656420746f031d77697468647261772066726f6d20796f7572206163636f756e743a2a2a2272646d78362d6a616161612d61616161612d61616164712d636169202a2a596f75720d7375626163636f756e743a2a2a032330303030303030303030303030303030303030303030303030303030303030303030301d3030303030303030303030303030303030303030303030303030303030232a2a526571756573746564207769746864726177616c20616c6c6f77616e63653a2a2a032031302049435020e29aa02054686520616c6c6f77616e63652077696c6c2062652273657420746f2031302049435020696e646570656e64656e746c79206f6620616e791e70726576696f757320616c6c6f77616e63652e20556e74696c207468697303217472616e73616374696f6e20686173206265656e206578656375746564207468651e7370656e6465722063616e207374696c6c206578657263697365207468652370726576696f757320616c6c6f77616e63652028696620616e792920746f2069742773032166756c6c20616d6f756e742e202a2a45787069726174696f6e20646174653a2a2a204e6f2065787069726174696f6e2e202a2a417070726f76616c206665653a2a2a23302e3030303120494350202a2a5472616e73616374696f6e206665657320746f206265031a7061696420627920796f7572207375626163636f756e743a2a2a2330303030303030303030303030303030303030303030303030303030303030303030301d30303030303030303030303030303030303030303030303030303030308302467374617475738203477265706c6965648301820458206d8327eb52806a887c0e4f444261e7bde20005e64d9b31479b9af72f8f89886083024474696d65820349c8ccbcfea4c8ca8318697369676e61747572655830b9eb03718c42aa1926bab9956dcef37432045ba1122baf120b8fc3e9fb56f75df8eee419e4e6488e60db79dcaba8c153";
    const CALL: &str = "d9d9f7a167636f6e74656e74a76361726758684449444c066e7d6d7b6e016e786c02b3b0dac30368ad86ca8305026c08c6fcb60200ba89e5c20402a2de94eb060282f3f3910c03d8a38ca80d7d919c9cbf0d00dea7f7da0d03cb96dcb40e04010501904e0000008094ebdc030000010a00000000000000070101006b63616e69737465725f69644a000000000000000201016e696e67726573735f6578706972791b18072a6f7894d0006b6d6574686f645f6e616d656d69637263325f617070726f7665656e6f6e6365506b99f1c2338b4543152aae206d5286726c726571756573745f747970656463616c6c6673656e646572581d052c5f6f270fc4a3a882a8075732cba90ad4bd25d30bd2cf7b0bfe7c02";
    const CONSENT: &str = "d9d9f7a167636f6e74656e74a76361726758d84449444c086d7b6e766c02aeaeb1cc0501d880c6d007716c02cbaeb581017ab183e7f1077a6b028beabfc2067f8ef1c1ee0d036e046c02efcee7800402c4fbf2db05056c03d6fca70200e1edeb4a7184f7fee80a060107684449444c066e7d6d7b6e016e786c02b3b0dac30368ad86ca8305026c08c6fcb60200ba89e5c20402a2de94eb060282f3f3910c03d8a38ca80d7d919c9cbf0d00dea7f7da0d03cb96dcb40e04010501904e0000008094ebdc030000010a00000000000000070101000d69637263325f617070726f76650002656e0101230003006b63616e69737465725f69644a000000000000000201016e696e67726573735f6578706972791b18072a6f7894d0006b6d6574686f645f6e616d6578246963726332315f63616e69737465725f63616c6c5f636f6e73656e745f6d657373616765656e6f6e636550369f1914fd64438f5e6329fcb66b1d4d6c726571756573745f747970656463616c6c6673656e6465724104";
    const ROOT_KEY: &str =
        "b354faa40626ebc91ed7e55b2307feff70d119ef37f89915bd4561a1ed8c5c26c8c2cb8c4711eec681bf213a75cb988008fb1f4d7aa278cd4fad6f295c83bab04b8cabcb32640cf926083daf865551f9f3b76fd800dac027a583858b9d1d3f64";

    fn bls_flow(cert: &str, call: &str, consent: &str) -> u32 {
        let cert_data = hex::decode(cert).unwrap();
        let call_data = hex::decode(call).unwrap();
        let root_key = hex::decode(ROOT_KEY).unwrap();
        let consent_data = hex::decode(consent).unwrap();

        unsafe {
            // 1. send consent_request
            if rs_parse_consent_request(consent_data.as_ptr(), consent_data.len() as u16)
                != ParserError::Ok as u32
            {
                std::println!("Error parsing consent request");
                return ParserError::InvalidConsentMsg as u32;
            }

            // 2. send call request
            if rs_parse_canister_call_request(call_data.as_ptr(), call_data.len() as u16)
                != ParserError::Ok as u32
            {
                std::println!("Error parsing call request");
                return ParserError::InvalidCallRequest as u32;
            }
            // 3. send certificate, by default use root key
            if rs_verify_certificate(
                cert_data.as_ptr(),
                cert_data.len() as u16,
                root_key.as_ptr(),
            ) != ParserError::Ok as u32
            {
                std::println!("Error verifying certificate");
                return ParserError::InvalidCertificate as u32;
            }

            ParserError::Ok as u32
        }
    }

    #[test]
    fn test_bls_flow() {
        let res = bls_flow(CERT, CALL, CONSENT);
        assert_eq!(res, ParserError::Ok as u32);
        unsafe {
            rs_clear_resources();
        }
    }
}

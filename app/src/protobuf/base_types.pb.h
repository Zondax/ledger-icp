/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_IC_BASE_TYPES_PB_V1_BASE_TYPES_PB_H_INCLUDED
#define PB_IC_BASE_TYPES_PB_V1_BASE_TYPES_PB_H_INCLUDED

#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* A descriptor of the authorization of all the update methods in a
 canister that require authorization.
 Methods that should be accessible to anyone should not appear in this list */
typedef struct _ic_base_types_pb_v1_CanisterAuthzInfo {
    pb_callback_t methods_authz;
} ic_base_types_pb_v1_CanisterAuthzInfo;

/* A PB container for a CanisterId, which uniquely identifies
 a principal. */
typedef struct _ic_base_types_pb_v1_CanisterId {
    pb_callback_t serialized_id;
} ic_base_types_pb_v1_CanisterId;

/* A descriptor of the authorization of a single method.
 Any of the principals in the list are authorized to execute
 the method. */
typedef struct _ic_base_types_pb_v1_MethodAuthzInfo {
    pb_callback_t method_name;
    pb_callback_t principal_ids;
} ic_base_types_pb_v1_MethodAuthzInfo;

/* A container for a NeuronId blob, which uniquely identifies
 a Neuron. */
typedef struct _ic_base_types_pb_v1_NeuronId {
    uint64_t id;
} ic_base_types_pb_v1_NeuronId;

typedef PB_BYTES_ARRAY_T(30) ic_base_types_pb_v1_PrincipalId_serialized_id_t;
/* A PB container for a PrincipalId, which uniquely identifies
 a principal. */
typedef struct _ic_base_types_pb_v1_PrincipalId {
    ic_base_types_pb_v1_PrincipalId_serialized_id_t serialized_id;
} ic_base_types_pb_v1_PrincipalId;

/* The id of a specific proposal. */
typedef struct _ic_base_types_pb_v1_ProposalId {
    uint64_t id;
} ic_base_types_pb_v1_ProposalId;


/* Extensions */
/* Extension field ic_base_types_pb_v1_tui_signed_message was skipped because only "optional"
   type of extension fields is currently supported. */
/* Extension field ic_base_types_pb_v1_tui_signed_display_q2_2021 was skipped because only "optional"
   type of extension fields is currently supported. */

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define ic_base_types_pb_v1_PrincipalId_init_default {{0, {0}}}
#define ic_base_types_pb_v1_CanisterId_init_default {{{NULL}, NULL}}
#define ic_base_types_pb_v1_NeuronId_init_default {0}
#define ic_base_types_pb_v1_ProposalId_init_default {0}
#define ic_base_types_pb_v1_MethodAuthzInfo_init_default {{{NULL}, NULL}, {{NULL}, NULL}}
#define ic_base_types_pb_v1_CanisterAuthzInfo_init_default {{{NULL}, NULL}}
#define ic_base_types_pb_v1_PrincipalId_init_zero {{0, {0}}}
#define ic_base_types_pb_v1_CanisterId_init_zero {{{NULL}, NULL}}
#define ic_base_types_pb_v1_NeuronId_init_zero   {0}
#define ic_base_types_pb_v1_ProposalId_init_zero {0}
#define ic_base_types_pb_v1_MethodAuthzInfo_init_zero {{{NULL}, NULL}, {{NULL}, NULL}}
#define ic_base_types_pb_v1_CanisterAuthzInfo_init_zero {{{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define ic_base_types_pb_v1_CanisterAuthzInfo_methods_authz_tag 1
#define ic_base_types_pb_v1_CanisterId_serialized_id_tag 1
#define ic_base_types_pb_v1_MethodAuthzInfo_method_name_tag 1
#define ic_base_types_pb_v1_MethodAuthzInfo_principal_ids_tag 2
#define ic_base_types_pb_v1_NeuronId_id_tag      2
#define ic_base_types_pb_v1_PrincipalId_serialized_id_tag 1
#define ic_base_types_pb_v1_ProposalId_id_tag    1
#define ic_base_types_pb_v1_tui_signed_message_tag 20000
#define ic_base_types_pb_v1_tui_signed_display_q2_2021_tag 20001

/* Struct field encoding specification for nanopb */
#define ic_base_types_pb_v1_PrincipalId_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BYTES,    serialized_id,     1)
#define ic_base_types_pb_v1_PrincipalId_CALLBACK NULL
#define ic_base_types_pb_v1_PrincipalId_DEFAULT NULL

#define ic_base_types_pb_v1_CanisterId_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    serialized_id,     1)
#define ic_base_types_pb_v1_CanisterId_CALLBACK pb_default_field_callback
#define ic_base_types_pb_v1_CanisterId_DEFAULT NULL

#define ic_base_types_pb_v1_NeuronId_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   id,                2)
#define ic_base_types_pb_v1_NeuronId_CALLBACK NULL
#define ic_base_types_pb_v1_NeuronId_DEFAULT NULL

#define ic_base_types_pb_v1_ProposalId_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   id,                1)
#define ic_base_types_pb_v1_ProposalId_CALLBACK NULL
#define ic_base_types_pb_v1_ProposalId_DEFAULT NULL

#define ic_base_types_pb_v1_MethodAuthzInfo_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   method_name,       1) \
X(a, CALLBACK, REPEATED, BYTES,    principal_ids,     2)
#define ic_base_types_pb_v1_MethodAuthzInfo_CALLBACK pb_default_field_callback
#define ic_base_types_pb_v1_MethodAuthzInfo_DEFAULT NULL

#define ic_base_types_pb_v1_CanisterAuthzInfo_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  methods_authz,     1)
#define ic_base_types_pb_v1_CanisterAuthzInfo_CALLBACK pb_default_field_callback
#define ic_base_types_pb_v1_CanisterAuthzInfo_DEFAULT NULL
#define ic_base_types_pb_v1_CanisterAuthzInfo_methods_authz_MSGTYPE ic_base_types_pb_v1_MethodAuthzInfo

extern const pb_msgdesc_t ic_base_types_pb_v1_PrincipalId_msg;
extern const pb_msgdesc_t ic_base_types_pb_v1_CanisterId_msg;
extern const pb_msgdesc_t ic_base_types_pb_v1_NeuronId_msg;
extern const pb_msgdesc_t ic_base_types_pb_v1_ProposalId_msg;
extern const pb_msgdesc_t ic_base_types_pb_v1_MethodAuthzInfo_msg;
extern const pb_msgdesc_t ic_base_types_pb_v1_CanisterAuthzInfo_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ic_base_types_pb_v1_PrincipalId_fields &ic_base_types_pb_v1_PrincipalId_msg
#define ic_base_types_pb_v1_CanisterId_fields &ic_base_types_pb_v1_CanisterId_msg
#define ic_base_types_pb_v1_NeuronId_fields &ic_base_types_pb_v1_NeuronId_msg
#define ic_base_types_pb_v1_ProposalId_fields &ic_base_types_pb_v1_ProposalId_msg
#define ic_base_types_pb_v1_MethodAuthzInfo_fields &ic_base_types_pb_v1_MethodAuthzInfo_msg
#define ic_base_types_pb_v1_CanisterAuthzInfo_fields &ic_base_types_pb_v1_CanisterAuthzInfo_msg

/* Maximum encoded size of messages (where known) */
/* ic_base_types_pb_v1_CanisterId_size depends on runtime parameters */
/* ic_base_types_pb_v1_MethodAuthzInfo_size depends on runtime parameters */
/* ic_base_types_pb_v1_CanisterAuthzInfo_size depends on runtime parameters */
#define ic_base_types_pb_v1_NeuronId_size        11
#define ic_base_types_pb_v1_PrincipalId_size     32
#define ic_base_types_pb_v1_ProposalId_size      11

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif

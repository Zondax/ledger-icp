name: Code Coverage
on:
  push:
    branches:
      - main
      - develop
      - dev
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    container:
      image: zondax/rust-ci:latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          submodules: true

      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y lcov libusb-1.0-0 libudev-dev cmake g++ python3 python3-pip
          pip3 install ledgerblue --break-system-packages

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo
            target/
            app/rust/target/
          key: ${{ runner.os }}-rust-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-coverage-

      - name: Run C++ tests with coverage
        run: |
          mkdir -p build-coverage coverage
          cd build-coverage
          cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage" -DCMAKE_C_FLAGS="--coverage" -DCMAKE_EXE_LINKER_FLAGS="--coverage" ..
          make -j$(nproc)
          ctest || true
          # Generate coverage report
          lcov --capture --directory . --output-file ../coverage/lcov.info --ignore-errors mismatch 2>/dev/null || \
          lcov --capture --directory . --output-file ../coverage/lcov.info
          if [ -f ../coverage/lcov.info ]; then
            lcov --remove ../coverage/lcov.info '/usr/*' '*/deps/*' '*/tests/*' '*/.hunter/*' '*/CMakeFiles/*' --output-file ../coverage/lcov.info
          fi

      - name: Run Rust tests with coverage
        run: |
          cd app/rust
          mkdir -p target/llvm-cov
          cargo llvm-cov --lcov --output-path target/llvm-cov/lcov.info || true

      - name: Merge coverage reports
        run: |
          mkdir -p coverage
          # Copy Rust coverage if it exists
          if [ -f app/rust/target/llvm-cov/lcov.info ]; then
            cp app/rust/target/llvm-cov/lcov.info coverage/rust-lcov.info
          fi
          # Merge coverage reports if both exist
          if [ -f coverage/lcov.info ] && [ -f coverage/rust-lcov.info ]; then
            lcov -a coverage/lcov.info -a coverage/rust-lcov.info -o coverage/merged-lcov.info
          elif [ -f coverage/lcov.info ]; then
            cp coverage/lcov.info coverage/merged-lcov.info
          elif [ -f coverage/rust-lcov.info ]; then
            cp coverage/rust-lcov.info coverage/merged-lcov.info
          fi

      - name: Display coverage summary
        run: |
          echo "=== Coverage Report Summary ==="
          if [ -f coverage/lcov.info ]; then
            echo "C++ Coverage:"
            lcov --summary coverage/lcov.info 2>/dev/null || echo "No C++ coverage data"
          fi
          if [ -f coverage/rust-lcov.info ]; then
            echo -e "\nRust Coverage:"
            lcov --summary coverage/rust-lcov.info 2>/dev/null || echo "No Rust coverage data"
          fi
          if [ -f coverage/merged-lcov.info ]; then
            echo -e "\nTotal Coverage:"
            lcov --summary coverage/merged-lcov.info 2>/dev/null || echo "No merged coverage data"
          else
            echo "No coverage reports generated"
          fi

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage/*.info

      - name: Generate Coverage Summary and Badge
        run: |
          echo "## Code Coverage Report 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Process C++ coverage
          if [ -f "coverage/lcov.info" ]; then
            summary=$(lcov --summary "coverage/lcov.info" 2>&1)
            lines=$(echo "$summary" | grep "lines......" | sed 's/^.*: //')
            functions=$(echo "$summary" | grep "functions.." | sed 's/^.*: //')
            branches=$(echo "$summary" | grep "branches..." | sed 's/^.*: //' || echo "N/A")
            
            echo "### C++ Coverage" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | $lines |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | $functions |" >> $GITHUB_STEP_SUMMARY
            if [ "$branches" != "N/A" ]; then
              echo "| Branches | $branches |" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Process Rust coverage
          if [ -f "coverage/rust-lcov.info" ]; then
            summary=$(lcov --summary "coverage/rust-lcov.info" 2>&1)
            lines=$(echo "$summary" | grep "lines......" | sed 's/^.*: //')
            functions=$(echo "$summary" | grep "functions.." | sed 's/^.*: //')
            branches=$(echo "$summary" | grep "branches..." | sed 's/^.*: //' || echo "N/A")
            
            echo "### Rust Coverage" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | $lines |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | $functions |" >> $GITHUB_STEP_SUMMARY
            if [ "$branches" != "N/A" ]; then
              echo "| Branches | $branches |" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Total coverage with special formatting
          if [ -f coverage/merged-lcov.info ]; then
            echo "### 📈 Total Project Coverage" >> $GITHUB_STEP_SUMMARY
            summary=$(lcov --summary coverage/merged-lcov.info 2>&1)
            lines=$(echo "$summary" | grep "lines......" | sed 's/^.*: //')
            functions=$(echo "$summary" | grep "functions.." | sed 's/^.*: //')
            branches=$(echo "$summary" | grep "branches..." | sed 's/^.*: //' || echo "N/A")
            
            echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| **Lines** | **$lines** |" >> $GITHUB_STEP_SUMMARY
            echo "| **Functions** | **$functions** |" >> $GITHUB_STEP_SUMMARY
            if [ "$branches" != "N/A" ]; then
              echo "| **Branches** | **$branches** |" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Extract percentage for badge
            COVERAGE_PCT=$(echo "$lines" | grep -oE '[0-9]+\.[0-9]+' | head -1 || echo "0")
            echo "COVERAGE_PCT=${COVERAGE_PCT}" >> $GITHUB_ENV
            
            # Determine color
            COVERAGE_INT=${COVERAGE_PCT%.*}
            if [ "${COVERAGE_INT:-0}" -ge 80 ]; then
              echo "COVERAGE_COLOR=brightgreen" >> $GITHUB_ENV
            elif [ "${COVERAGE_INT:-0}" -ge 60 ]; then
              echo "COVERAGE_COLOR=yellow" >> $GITHUB_ENV
            else
              echo "COVERAGE_COLOR=red" >> $GITHUB_ENV
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 LCOV reports available as artifacts above ⬆️" >> $GITHUB_STEP_SUMMARY

      - name: Create Coverage Badge
        if: github.ref == 'refs/heads/main'
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.COVERAGE_GIST_ID }}
          filename: ledger-icp-coverage.json
          label: Coverage
          message: ${{ env.COVERAGE_PCT }}%
          color: ${{ env.COVERAGE_COLOR }}

      - name: Comment PR with Coverage Report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            // Build the comment body
            let comment = '## Code Coverage Report 📊\n\n';
            
            // Function to extract coverage details
            const extractCoverage = (file, name) => {
              if (!fs.existsSync(file)) return '';
              
              try {
                const summary = execSync(`lcov --summary ${file} 2>&1`, {encoding: 'utf8'});
                const lines = summary.match(/lines\.+: (.+)/)?.[1] || 'N/A';
                const functions = summary.match(/functions\.+: (.+)/)?.[1] || 'N/A';
                const branches = summary.match(/branches\.+: (.+)/)?.[1] || 'N/A';
                
                let section = `### ${name} Coverage\n`;
                section += `| Metric | Coverage |\n`;
                section += `|--------|----------|\n`;
                section += `| Lines | ${lines} |\n`;
                section += `| Functions | ${functions} |\n`;
                if (branches !== 'N/A') {
                  section += `| Branches | ${branches} |\n`;
                }
                section += '\n';
                return section;
              } catch (e) {
                return `### ${name} Coverage\nNo coverage data available\n\n`;
              }
            };
            
            // Add coverage for each language
            comment += extractCoverage('coverage/lcov.info', 'C++');
            comment += extractCoverage('coverage/rust-lcov.info', 'Rust');
            
            // Add total coverage
            if (fs.existsSync('coverage/merged-lcov.info')) {
              try {
                const summary = execSync('lcov --summary coverage/merged-lcov.info 2>&1', {encoding: 'utf8'});
                const lines = summary.match(/lines\.+: (.+)/)?.[1] || 'N/A';
                const functions = summary.match(/functions\.+: (.+)/)?.[1] || 'N/A';
                const branches = summary.match(/branches\.+: (.+)/)?.[1] || 'N/A';
                
                comment += '### 📈 Total Project Coverage\n';
                comment += '| Metric | Coverage |\n';
                comment += '|--------|----------|\n';
                comment += `| **Lines** | **${lines}** |\n`;
                comment += `| **Functions** | **${functions}** |\n`;
                if (branches !== 'N/A') {
                  comment += `| **Branches** | **${branches}** |\n`;
                }
              } catch (e) {
                comment += '### Total Coverage\nFailed to generate total coverage\n';
              }
            }
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Code Coverage Report 📊')
            );
            
            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }